{"uid":"2b3f0ebee5fa32cd","name":"test_character_by_name","fullName":"tests.test_get_characters.TestCharacters#test_character_by_name","historyId":"4d831a96d36f8de695e604a7f9e22c79","time":{"start":1682616626235,"stop":1682616626557,"duration":322},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: [Errno Expecting value] <!doctype html><html data-adblockkey=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANDrp2lz7AOmADaN8tA50LsWcjLFyQFcb/P2Txc58oYOeILb3vBw7J6f4pamkAQVSQuqYsKx3YzdUHCvbVZvFUsCAwEAAQ==_oPmWnPWlRE8bVxTQxqo7/xSl+9WYSBh81ITM0mj9V0Vjxv9K+fvNcr7U+F/S5n/vjRuJs3+fKLbVbhIGWq5zYw==\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><link rel=\"preconnect\" href=\"https://www.google.com\" crossorigin></head><body><div id=\"target\" style='opacity: 0'></div><script>window.park = \"eyJ1dWlkIjoiMTYyZWQ3MjgtOTM4OS1mMzY5LTRlMmYtMzE4OGFmMTFjOGZhIiwicGFnZV90aW1lIjoxNjgyNjE2NjI2LCJwYWdlX3VybCI6Imh0dHBzOlwvXC93d3cuYnJlYWtpbmdiYWRhcGkuY29tXC9hcGlcL2NoYXJhY3RlcnNcLz9uYW1lPVdhbHRlcitXaGl0ZSIsInBhZ2VfbWV0aG9kIjoiR0VUIiwicGFnZV9yZXF1ZXN0Ijp7Im5hbWUiOiJXYWx0ZXIgV2hpdGUifSwicGFnZV9oZWFkZXJzIjpbXSwiaG9zdCI6Ind3dy5icmVha2luZ2JhZGFwaS5jb20iLCJpcCI6IjIwLjE3Mi4xOS41NSJ9\";</script><script src=\"/js/parking.2.104.6.js\"></script></body></html>: 0","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/requests/models.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '<!doctype html><html data-adblockkey=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANDrp2lz7AOmADaN8tA50LsWcjLFyQFcb/P2Txc58oYOeIL...2luZ2JhZGFwaS5jb20iLCJpcCI6IjIwLjE3Mi4xOS41NSJ9\";</script><script src=\"/js/parking.2.104.6.js\"></script></body></html>'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd7243f2950>\ns = '<!doctype html><html data-adblockkey=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANDrp2lz7AOmADaN8tA50LsWcjLFyQFcb/P2Txc58oYOeIL...2luZ2JhZGFwaS5jb20iLCJpcCI6IjIwLjE3Mi4xOS41NSJ9\";</script><script src=\"/js/parking.2.104.6.js\"></script></body></html>'\n_w = <built-in method match of re.Pattern object at 0x7fd7244bdcb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd7243f2950>\ns = '<!doctype html><html data-adblockkey=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANDrp2lz7AOmADaN8tA50LsWcjLFyQFcb/P2Txc58oYOeIL...2luZ2JhZGFwaS5jb20iLCJpcCI6IjIwLjE3Mi4xOS41NSJ9\";</script><script src=\"/js/parking.2.104.6.js\"></script></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_get_characters.TestCharacters testMethod=test_character_by_name>\n\n    @pytest.mark.smoke\n    def test_character_by_name(self):\n>       body = fetch_json(f'{BASE_URL}characters/?name=Walter+White')\n\ntests/test_get_characters.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/rest_api_helper.py:13: in fetch_json\n    return response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            if is_py2: # e is a ValueError\n                raise RequestsJSONDecodeError(e.message)\n            else:\n>               raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE               requests.exceptions.JSONDecodeError: [Errno Expecting value] <!doctype html><html data-adblockkey=\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANDrp2lz7AOmADaN8tA50LsWcjLFyQFcb/P2Txc58oYOeILb3vBw7J6f4pamkAQVSQuqYsKx3YzdUHCvbVZvFUsCAwEAAQ==_oPmWnPWlRE8bVxTQxqo7/xSl+9WYSBh81ITM0mj9V0Vjxv9K+fvNcr7U+F/S5n/vjRuJs3+fKLbVbhIGWq5zYw==\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><link rel=\"preconnect\" href=\"https://www.google.com\" crossorigin></head><body><div id=\"target\" style='opacity: 0'></div><script>window.park = \"eyJ1dWlkIjoiMTYyZWQ3MjgtOTM4OS1mMzY5LTRlMmYtMzE4OGFmMTFjOGZhIiwicGFnZV90aW1lIjoxNjgyNjE2NjI2LCJwYWdlX3VybCI6Imh0dHBzOlwvXC93d3cuYnJlYWtpbmdiYWRhcGkuY29tXC9hcGlcL2NoYXJhY3RlcnNcLz9uYW1lPVdhbHRlcitXaGl0ZSIsInBhZ2VfbWV0aG9kIjoiR0VUIiwicGFnZV9yZXF1ZXN0Ijp7Im5hbWUiOiJXYWx0ZXIgV2hpdGUifSwicGFnZV9oZWFkZXJzIjpbXSwiaG9zdCI6Ind3dy5icmVha2luZ2JhZGFwaS5jb20iLCJpcCI6IjIwLjE3Mi4xOS41NSJ9\";</script><script src=\"/js/parking.2.104.6.js\"></script></body></html>: 0\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/requests/models.py:917: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1682616593458,"stop":1682616593472,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_TestCharacters","time":{"start":1682616624730,"stop":1682616624730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestCharacters::0","time":{"start":1682616629118,"stop":1682616629118,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_characters"},{"name":"subSuite","value":"TestCharacters"},{"name":"host","value":"fv-az465-377"},{"name":"thread","value":"2269-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_characters"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"2b3f0ebee5fa32cd.json","parameterValues":[]}